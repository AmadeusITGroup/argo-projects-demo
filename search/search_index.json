{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#a-gitops-continuous-deployment-and-delivery-demonstrator-using-the-argo-projects","title":"A Gitops continuous deployment and delivery demonstrator using the Argo projects","text":""},{"location":"#description","title":"Description","text":"<p>A brief description of the project goes here.</p>"},{"location":"#the-project-structure","title":"The project structure","text":"<p>The <code>argo-projects</code> folder contains all the manifests for the platform: the Argo CD application/applicationsets, the kubernetes resources for the Argo controllers, the infrastructure and the applications</p> <p>The <code>demo-app</code> folder contains the source code for the PetStore demo application, that we are using to demonstrate the deployment, promotion workflow and progressive rollouts mechanisms.</p> <p>The <code>ui</code> folder contains the source code for the simple web page allowing to demonstrate the progressive rollout on the production version of the application.</p> <p>The <code>scripts</code> folder contains a few usefull scripts that you will use in the next chapters.</p> <p>The <code>workflow-resources</code> contains the source code for the steps run during the promotion workflow.</p> <p>The <code>docs</code> folder contains the project documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>To setup this demonstrator, feel free to fork this repository and follow the installation instructions.</p>"},{"location":"#promotion-workflow","title":"Promotion workflow","text":"<p>See the promotion workflow doc.</p>"},{"location":"#progressive-rollout","title":"Progressive rollout","text":"<p>See the progressive rollout doc.</p>"},{"location":"#run-the-demo","title":"Run the Demo","text":"<p>See How to run the demo.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the Apache License.</p>"},{"location":"PLATFORM_INSTALLATION/","title":"Platform installation","text":""},{"location":"PLATFORM_INSTALLATION/#pre-requisistes","title":"Pre-requisistes","text":"<p>To be able to install the platform and its components, you need first a kubernetes cluster running.</p> <p>You can use k3d, minikube or kind for example.</p> <p>You will also need:</p> <ul> <li>kubectl</li> <li>Argo CD CLI</li> </ul>"},{"location":"PLATFORM_INSTALLATION/#platform-components","title":"Platform components","text":"<p>In your kubernetes cluster, we'll start by installing Argo CD.</p> <pre><code>./scripts/install-argo-cd.sh\n</code></pre> <p>Once installed, we'll use Argo CD to deploy absolutely everything in the cluster. It will even watch and patch itself !</p> <p></p> <p>Using Argo CD, we will deploy some infrastructure components: * Ingress Nginx controller: to be able to expose ingresses to the Argo CD and Argo Workflows interfaces, and also act as a load balancer for our canary tests using Argo Rollouts * Docker-registry: to handle and serve our microservice images * Prometheus stack: to gather microservice's prometheus metrics and use them as analysis in our progressive rollout</p> <p>It will also take care of installing the Argo Projects: * Argo CD, patching itself ! * Argo Workflows * Argo Events * Argo Rollouts</p> <p>And a PetStore demo application in two phases: test and production.</p>"},{"location":"PLATFORM_INSTALLATION/#components-installation","title":"Components installation","text":"<p>Once the Argo CD installation run, you can access the UI with a simple port-forward:</p> <pre><code>kubectl port-forward svc/argocd-server -n argocd 8080:80\n</code></pre> <p>This is only needed as long as we have not patched the installation with an additional ingress.</p> <p>You can now access the Argo CD interface at \"http://localhost:8080\". You can connect using the \"admin\" user and the password retrieved by executing the command:</p> <pre><code>argocd admin initial-password -n argocd\n</code></pre> <p>You can now create an application using the 'New App' button.</p> <p></p> <p>You can use the following parameters as reference:</p> <p></p> <p>You should now have all components deployed in your cluster:</p> <p></p> <ul> <li>/!\\ Do not mind the app namespaces in red, we'll push the application image in the step just after.*</li> </ul> <p>This is it. This was the last manual action you had to perform on the platform !</p>"},{"location":"PLATFORM_INSTALLATION/#access-the-ui","title":"Access the UI","text":"<p>You can now access the UI at:</p> <ul> <li>Argo CD: https://argocd.127.0.0.1.nip.io/</li> <li>Argo Workflows (+ Events): https://argo-workflows.127.0.0.1.nip.io/workflows </li> </ul>"},{"location":"PLATFORM_INSTALLATION/#troubleshooting","title":"Troubleshooting","text":"<p>In case the ArgoCD UI doesn't load (too many redirects), you might need to restart the argo-server pod to take into account the latest options.</p> <pre><code>kubectl rollout restart deployment argocd-server -n argocd\n</code></pre> <p>If some pods are in CrashLoop state with the error <code>Too many open files</code>, try:</p> <pre><code>sudo sysctl fs.inotify.max_user_instances=1280\nsudo sysctl fs.inotify.max_user_watches=655360\n</code></pre> <p>Ref: https://github.com/kubeflow/manifests/issues/2087</p>"},{"location":"PROGRESSIVE_ROLLOUT/","title":"Progressive rollout","text":""},{"location":"PROMOTION_WORKFLOW/","title":"Promotion workflow","text":""}]}